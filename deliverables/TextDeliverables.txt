02/07/19: Deliverable 01 - set up main, created Square class,Tetramino class, randNext class
- "ui" package
- main class has main method and calls initMenu() and State.switchState()
- Print statements present

08/07/19: Deliverable 02 - fleshed out game's different states and switching between them, revamped main class, wrote
randNext class which deals with "next piece" generation, added enumeration to Tetramino class, changed Square class to
be future constructor for squares on the (unwritten) game board grid, added KeyInput class which will handle key input,
added Game class which will handle real-time game logic, added DrawState class which draws UI of given state

- "ui" package
- randNext
- main method initializes UI
- sample Square is constructed in main, JFrame and JPanels are constructed in DrawState
- Square has fields and will be referenced in GameBoard code (unwritten)
- a State is passed through switchState to switch game states
- currentState is a local variable within State that determines the current game state
- getState() is a getter for currentState which is used in KeyInput to determine behaviour of keys during game states
- Condition and loop are both used for determining if a line is clearable in Game (temporary pseudocode)
- Call graph is physical
- Flow chart is physical
- Game responds to Enter and Escape keys which do stuff
- Debugger: find currentState and see if problems are due to currentState being incorrectly assigned

10/07/19: Deliverable 03 - added specifications to basically every method and added tests for Square and State

15/07/19: Deliverable 04 - added options panel for configuring gameSpeed (not yet tied to any functionality) which
saves to local file and maintains value between sessions and tests for this save/load system, converted DrawState into
interface system (along with DrawMenu and DrawGame), added Animatables interface for all animatable game elements,
implemented every Tetrimino piece through Animatables, added Board class to handle the game board, and tests to make
sure the Animatable game pieces place correctly on the board, added Printer for printing

- Save/Load Options (currently only gameSpeed), tests in TestTetrisProperties
- Introduced Animatables, DrawState, and Printer as three new interfaces
- KeyInput implements both Closeable and Printer at the same time
- Each subtype of Animatables has tests in TestPieces and technically DrawState does too in TestState
- Interface/Implementation instantiation thing is done in every written instance of each Animatable and DrawState

19/07/19: Deliverable 05 - added DrawPack abstract class which contains repetitive code previously called on each time
a state's 'draw' method was called. Moved this repetitive code into inheritable methods from DrawPack in order to
tidy up the code and increase abstraction (writing code that acts on one single JFrame and placing that code in
different classes is possible because the JFrame is a global static object)

17/07/19: Deliverable 06 - Three exceptions added: PropertiesMissingException and UnknownStateException (which are
RuntimeExceptions) and IOException

- PropertiesMissingException and IOException are thrown in TetrisProperties when the properties file is called to be
read but does not exist or the file stream is interrupted
- UnknownStateException is thrown in State when setState accepts an unknown State. Exception is logged and caught,
reverted to the previous state. Finally was added which prints the final state after try/catch.